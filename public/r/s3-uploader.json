{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "s3-uploader",
  "type": "registry:lib",
  "title": "S3 Uploader",
  "description": "A utility function for uploading files to S3.",
  "dependencies": [
    "@untools/logger",
    "aws-sdk"
  ],
  "files": [
    {
      "path": "registry/lagos/utils/s3-uploader.ts",
      "content": "// ./registry/lagos/utils/s3-uploader.ts\n\nexport interface S3UploadResponse {\n  success: boolean;\n  file?: {\n    key: string;\n    url: string;\n    name: string;\n    size: number;\n  };\n  error?: string;\n}\n\nexport class S3Uploader {\n  private baseUrl: string;\n  private apiKey: string;\n\n  constructor(baseUrl: string, apiKey: string) {\n    this.baseUrl = baseUrl;\n    this.apiKey = apiKey;\n  }\n\n  async uploadFile(file: File, folder = \"uploads\"): Promise<S3UploadResponse> {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"folder\", folder);\n\n      const response = await fetch(`${this.baseUrl}/api/s3/upload`, {\n        method: \"POST\",\n        headers: {\n          \"x-api-key\": this.apiKey,\n        },\n        body: formData,\n      });\n\n      const result = (await response.json()) as S3UploadResponse;\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n\n  async uploadFiles(\n    files: File[],\n    folder = \"uploads\"\n  ): Promise<S3UploadResponse[]> {\n    try {\n      const formData = new FormData();\n      files.forEach((file) => formData.append(\"files\", file));\n      formData.append(\"folder\", folder);\n\n      const response = await fetch(`${this.baseUrl}/api/s3/upload-multiple`, {\n        method: \"POST\",\n        headers: {\n          \"x-api-key\": this.apiKey,\n        },\n        body: formData,\n      });\n\n      const result = await response.json();\n      return (result as { files: S3UploadResponse[] }).files || [];\n    } catch (error) {\n      return files.map(() => ({\n        success: false,\n        error: (error as Error).message,\n      }));\n    }\n  }\n}\n\n// Create instance\nconst S3_UPLOADER_URL = process.env.NEXT_PUBLIC_MAIL_NOTIFIER_URL || \"\";\nconst S3_UPLOADER_KEY = process.env.NEXT_PUBLIC_MAIL_NOTIFIER_KEY || \"\";\n\nexport const s3Uploader = new S3Uploader(S3_UPLOADER_URL, S3_UPLOADER_KEY);\n",
      "type": "registry:lib",
      "target": "utils/aevr/s3-uploader.ts"
    }
  ]
}