{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A simple button component",
  "files": [
    {
      "path": "registry/lagos/ui/button.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  variant?:\n    | \"default\"\n    | \"primary\"\n    | \"secondary\"\n    | \"tertiary\"\n    | \"ghost\"\n    | \"danger\"\n    | \"warning-variant\"\n    | \"success-variant\"\n    | \"info-variant\"\n    | \"error-variant\";\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    { className, variant = \"primary\", size = \"md\", asChild = false, ...props },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Base button styles\n    const baseStyles =\n      \"inline-flex w-fit transform cursor-pointer items-center justify-center gap-2 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 active:scale-95 disabled:cursor-not-allowed disabled:opacity-50 disabled:brightness-90 disabled:active:scale-100\";\n\n    // Variant styles\n    const variantStyles = {\n      default:\n        \"bg-red-500 text-red-50 hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-600\",\n      primary:\n        \"bg-red-500 text-red-50 hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-600\",\n      secondary:\n        \"border border-gray-300 bg-gray-50 text-gray-600 hover:bg-gray-100 focus:ring-gray-600 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:focus:ring-gray-600\",\n      tertiary:\n        \"bg-red-100 text-red-600 hover:bg-red-200 focus:ring-red-500 dark:bg-red-800 dark:text-red-200 dark:hover:bg-red-700 dark:focus:ring-red-600\",\n      ghost:\n        \"bg-transparent text-red-600 hover:bg-red-50 focus:ring-red-500 dark:text-red-400 dark:hover:bg-red-950/50 dark:focus:ring-red-600\",\n      danger:\n        \"bg-red-500 text-red-50 hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-600\",\n      \"warning-variant\":\n        \"bg-yellow-500 text-yellow-50 hover:bg-yellow-600 focus:ring-yellow-500 dark:bg-yellow-600 dark:hover:bg-yellow-700 dark:focus:ring-yellow-600\",\n      \"success-variant\":\n        \"bg-green-500 text-green-50 hover:bg-green-600 focus:ring-green-500 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-600\",\n      \"info-variant\":\n        \"bg-blue-500 text-blue-50 hover:bg-blue-600 focus:ring-blue-500 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-600\",\n      \"error-variant\":\n        \"bg-red-500 text-red-50 hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-600\",\n    };\n\n    // Size styles\n    const sizeStyles = {\n      sm: \"px-2 py-1.5 text-sm\",\n      md: \"px-3 py-2 text-base\",\n      lg: \"px-6 py-3 text-xl\",\n    };\n\n    // Focus ring offset styles (adjusts for light/dark mode)\n    const focusOffsetStyles =\n      \"focus:ring-offset-white dark:focus:ring-offset-gray-800\";\n\n    return (\n      <Comp\n        className={cn(\n          baseStyles,\n          variantStyles[variant],\n          sizeStyles[size],\n          focusOffsetStyles,\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button };\n",
      "type": "registry:component"
    }
  ]
}