{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "empty-state",
  "type": "registry:ui",
  "dependencies": [
    "iconsax-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "card",
    "button"
  ],
  "files": [
    {
      "path": "registry/lagos/ui/empty-state.tsx",
      "content": "\"use client\";\n\nimport React, { FC, ReactNode } from \"react\";\nimport {\n  Card as CardIcon,\n  Document,\n  ArrowRight,\n  Add,\n  InfoCircle,\n  Warning2,\n  TickCircle,\n  CloseCircle,\n  SearchNormal1,\n  Box1,\n} from \"iconsax-react\";\nimport Link from \"next/link\";\nimport { Card, type CardProps } from \"@/registry/lagos/ui/card\";\nimport { Button } from \"@/registry/lagos/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\n// Types for EmptyState\nexport type EmptyStateVariant =\n  | \"default\"\n  | \"info\"\n  | \"warning\"\n  | \"success\"\n  | \"error\"\n  | \"card-apply\"\n  | \"transactions\"\n  | \"card-payment\"\n  | \"no-results\"\n  | \"no-data\";\n\nexport type EmptyStateSize = \"sm\" | \"md\" | \"lg\" | \"xl\";\n\nexport type EmptyStateLayout = \"vertical\" | \"horizontal\";\n\ninterface ActionButton {\n  label: string;\n  href?: string;\n  onClick?: () => void;\n  variant?:\n    | \"default\"\n    | \"primary\"\n    | \"secondary\"\n    | \"tertiary\"\n    | \"ghost\"\n    | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  icon?: ReactNode;\n  iconPosition?: \"start\" | \"end\";\n  external?: boolean;\n  disabled?: boolean;\n}\n\nexport interface EmptyStateProps {\n  // Content\n  title?: string | ReactNode;\n  description?: string | ReactNode;\n  icon?: ReactNode;\n\n  // Appearance\n  variant?: EmptyStateVariant;\n  size?: EmptyStateSize;\n  layout?: EmptyStateLayout;\n\n  // Actions\n  primaryAction?: ActionButton | ReactNode;\n  secondaryAction?: ActionButton | ReactNode;\n  actions?: Array<ActionButton | ReactNode>;\n\n  // Card props pass-through\n  cardProps?: Partial<CardProps>;\n\n  // Layout & Styling\n  className?: string;\n  children?: ReactNode;\n\n  // Additional features\n  illustration?: ReactNode;\n  showBorder?: boolean;\n  fullHeight?: boolean;\n}\n\n// Type guard for ActionButton\nconst isActionButton = (action: unknown): action is ActionButton => {\n  return (\n    typeof action === \"object\" &&\n    action !== null &&\n    !React.isValidElement(action) &&\n    \"label\" in (action as ActionButton)\n  );\n};\n\n// Variant configurations\nconst variantConfig = {\n  default: {\n    icon: <Add className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"default\" as const,\n  },\n  info: {\n    icon: <InfoCircle className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"info\" as const,\n  },\n  warning: {\n    icon: <Warning2 className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"warning\" as const,\n  },\n  success: {\n    icon: <TickCircle className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"success\" as const,\n  },\n  error: {\n    icon: <CloseCircle className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"error\" as const,\n  },\n  \"card-apply\": {\n    icon: <CardIcon className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"primary\" as const,\n    title: \"Apply for a New Card\",\n    description:\n      \"Get started with a new debit card to manage your finances better\",\n  },\n  transactions: {\n    icon: <Document className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"default\" as const,\n    title: \"No transactions yet\",\n    description:\n      \"Your transactions will appear here once you start using your card\",\n  },\n  \"card-payment\": {\n    icon: <CardIcon className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"error\" as const,\n    title: \"Complete Payment Required\",\n    description: \"Your card order is ready, complete the payment to proceed\",\n  },\n  \"no-results\": {\n    icon: <SearchNormal1 className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"default\" as const,\n    title: \"No results found\",\n    description:\n      \"Try adjusting your search or filter to find what you're looking for\",\n  },\n  \"no-data\": {\n    icon: <Box1 className=\"h-6 w-6\" variant=\"Bulk\" />,\n    variant: \"default\" as const,\n    title: \"No data available\",\n    description: \"There's nothing to display at the moment\",\n  },\n};\n\nconst EmptyState: FC<EmptyStateProps> = ({\n  title,\n  description,\n  icon,\n  variant = \"default\",\n  size = \"md\",\n  layout = \"vertical\",\n  primaryAction,\n  secondaryAction,\n  actions,\n  cardProps,\n  className,\n  children,\n  illustration,\n  showBorder = true,\n  fullHeight = false,\n}) => {\n  const config = variantConfig[variant];\n\n  // Merge props with defaults\n  const finalIcon = icon ?? config.icon;\n  const finalTitle = title;\n  const finalDescription = description;\n  const cardVariant = config.variant;\n\n  // Size mappings for card\n  const cardSizeMap: Record<EmptyStateSize, CardProps[\"size\"]> = {\n    sm: \"sm\",\n    md: \"md\",\n    lg: \"lg\",\n    xl: \"xl\",\n  };\n\n  // Render action button\n  const renderActionButton = (\n    action: ActionButton | ReactNode,\n    key: string\n  ) => {\n    if (isActionButton(action)) {\n      const content = (\n        <>\n          {action.icon && action.iconPosition === \"start\" && action.icon}\n          <span>{action.label}</span>\n          {action.icon && action.iconPosition !== \"start\" && action.icon}\n        </>\n      );\n\n      if (action.href) {\n        return (\n          <Button\n            key={key}\n            asChild\n            variant={action.variant || \"primary\"}\n            size={action.size || \"md\"}\n            disabled={action.disabled}\n          >\n            {action.external ? (\n              <a href={action.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {content}\n              </a>\n            ) : (\n              <Link href={action.href}>{content}</Link>\n            )}\n          </Button>\n        );\n      }\n\n      return (\n        <Button\n          key={key}\n          variant={action.variant || \"primary\"}\n          size={action.size || \"md\"}\n          onClick={action.onClick}\n          disabled={action.disabled}\n        >\n          {content}\n        </Button>\n      );\n    }\n\n    return <React.Fragment key={key}>{action}</React.Fragment>;\n  };\n\n  const contentClasses = cn(\n    \"flex flex-col items-center justify-center text-center gap-6\",\n    layout === \"horizontal\" && \"md:flex-row md:text-left md:items-start\",\n    fullHeight && \"min-h-[400px]\",\n    className\n  );\n\n  return (\n    <Card\n      variant={cardVariant}\n      size={cardSizeMap[size]}\n      border={showBorder ? \"default\" : \"borderless\"}\n      className={contentClasses}\n      icon={finalIcon}\n      title={finalTitle}\n      subtitle={finalDescription}\n      horizontal={layout === \"horizontal\"}\n      {...cardProps}\n    >\n      {/* Illustration */}\n      {illustration && (\n        <div className=\"mb-4 flex items-center justify-center\">\n          {illustration}\n        </div>\n      )}\n\n      {/* Actions */}\n      {(primaryAction || secondaryAction || actions) && (\n        <div\n          className={cn(\n            \"flex flex-wrap gap-3 mt-4\",\n            layout === \"vertical\" && \"justify-center\",\n            layout === \"horizontal\" && \"md:justify-start\"\n          )}\n        >\n          {primaryAction && renderActionButton(primaryAction, \"primary\")}\n          {secondaryAction && renderActionButton(secondaryAction, \"secondary\")}\n          {actions?.map((action, index) =>\n            renderActionButton(action, `action-${index}`)\n          )}\n        </div>\n      )}\n\n      {/* Custom children */}\n      {children}\n    </Card>\n  );\n};\n\n// Preset variants for common use cases\nexport const CardApplyEmpty: FC<Partial<EmptyStateProps>> = (props) => (\n  <EmptyState\n    variant=\"card-apply\"\n    primaryAction={{\n      label: \"Apply Now\",\n      href: \"https://paycard.100pay.co/\",\n      external: true,\n      icon: <ArrowRight className=\"h-4 w-4\" variant=\"Bulk\" />,\n      iconPosition: \"end\",\n    }}\n    {...props}\n  />\n);\n\nexport const TransactionsEmpty: FC<Partial<EmptyStateProps>> = (props) => (\n  <EmptyState variant=\"transactions\" showBorder={false} {...props} />\n);\n\nexport const NoResultsEmpty: FC<Partial<EmptyStateProps>> = (props) => (\n  <EmptyState\n    variant=\"no-results\"\n    secondaryAction={{\n      label: \"Clear filters\",\n      variant: \"ghost\",\n    }}\n    {...props}\n  />\n);\n\nexport const NoDataEmpty: FC<Partial<EmptyStateProps>> = (props) => (\n  <EmptyState variant=\"no-data\" {...props} />\n);\n\nEmptyState.displayName = \"EmptyState\";\n\nexport { EmptyState };\nexport default EmptyState;\n",
      "type": "registry:ui"
    }
  ]
}