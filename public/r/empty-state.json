{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "empty-state",
  "type": "registry:ui",
  "dependencies": [
    "iconsax-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "@aevr/card",
    "@aevr/button"
  ],
  "files": [
    {
      "path": "registry/lagos/ui/empty-state.tsx",
      "content": "// ./registry/lagos/ui/empty-state.tsx\n\n\"use client\";\n\nimport React, { FC, ReactNode } from \"react\";\nimport {\n  Card as CardIcon,\n  Document,\n  ArrowRight,\n  SearchNormal1,\n  Box1,\n} from \"iconsax-react\";\nimport Link from \"next/link\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/lagos/ui/button\";\n\n// CVA variants for EmptyState container\nconst emptyStateVariants = cva(\n  \"relative flex flex-col items-center justify-center text-center rounded-3xl transition-all duration-200\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border border-gray-200 bg-gray-50/50 dark:border-gray-800 dark:bg-gray-900/50\",\n        primary:\n          \"border border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/50\",\n        secondary:\n          \"border border-gray-200 bg-gray-100/50 dark:border-gray-700 dark:bg-gray-800/50\",\n        success:\n          \"border border-green-200 bg-green-50/50 dark:border-green-800 dark:bg-green-950/50\",\n        warning:\n          \"border border-yellow-200 bg-yellow-50/50 dark:border-yellow-800 dark:bg-yellow-950/50\",\n        error:\n          \"border border-red-200 bg-red-50/50 dark:border-red-800 dark:bg-red-950/50\",\n        info: \"border border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/50\",\n        ghost: \"border-0 bg-transparent\",\n      },\n      size: {\n        sm: \"p-6 gap-3\",\n        md: \"p-8 gap-4\",\n        lg: \"p-12 gap-6\",\n        xl: \"p-16 gap-8\",\n      },\n      layout: {\n        vertical: \"flex-col items-center text-center\",\n        horizontal: \"md:flex-row md:items-start md:text-left\",\n      },\n      bordered: {\n        true: \"\",\n        false: \"border-0\",\n      },\n      dashed: {\n        true: \"border-dashed\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      layout: \"vertical\",\n      bordered: true,\n      dashed: false,\n    },\n  }\n);\n\n// CVA variants for icon container\nconst iconContainerVariants = cva(\n  \"flex items-center justify-center rounded-full shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400\",\n        primary:\n          \"bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400\",\n        secondary:\n          \"bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400\",\n        success:\n          \"bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400\",\n        warning:\n          \"bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-400\",\n        error: \"bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-400\",\n        info: \"bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400\",\n        ghost:\n          \"bg-gray-100/50 text-gray-600 dark:bg-gray-800/50 dark:text-gray-400\",\n      },\n      size: {\n        sm: \"h-12 w-12\",\n        md: \"h-16 w-16\",\n        lg: \"h-20 w-20\",\n        xl: \"h-24 w-24\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n);\n\n// CVA variants for text content\nconst titleVariants = cva(\"font-semibold\", {\n  variants: {\n    variant: {\n      default: \"text-gray-900 dark:text-gray-100\",\n      primary: \"text-blue-900 dark:text-blue-100\",\n      secondary: \"text-gray-900 dark:text-gray-100\",\n      success: \"text-green-900 dark:text-green-100\",\n      warning: \"text-yellow-900 dark:text-yellow-100\",\n      error: \"text-red-900 dark:text-red-100\",\n      info: \"text-blue-900 dark:text-blue-100\",\n      ghost: \"text-gray-900 dark:text-gray-100\",\n    },\n    size: {\n      sm: \"text-base\",\n      md: \"text-lg\",\n      lg: \"text-xl\",\n      xl: \"text-2xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n});\n\nconst descriptionVariants = cva(\"text-muted-foreground max-w-md\", {\n  variants: {\n    size: {\n      sm: \"text-xs\",\n      md: \"text-sm\",\n      lg: \"text-base\",\n      xl: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\n// Types\nexport type EmptyStateVariant =\n  | \"default\"\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"error\"\n  | \"info\"\n  | \"ghost\";\n\nexport type EmptyStateSize = \"sm\" | \"md\" | \"lg\" | \"xl\";\n\nexport type EmptyStateLayout = \"vertical\" | \"horizontal\";\n\ninterface ActionButton {\n  label: string;\n  href?: string;\n  onClick?: () => void;\n  variant?:\n    | \"default\"\n    | \"primary\"\n    | \"secondary\"\n    | \"tertiary\"\n    | \"ghost\"\n    | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  icon?: ReactNode;\n  iconPosition?: \"start\" | \"end\";\n  external?: boolean;\n  disabled?: boolean;\n}\n\nexport interface EmptyStateProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"title\">,\n    VariantProps<typeof emptyStateVariants> {\n  // Content\n  title?: string | ReactNode;\n  description?: string | ReactNode;\n  icon?: ReactNode;\n\n  // Actions\n  primaryAction?: ActionButton | ReactNode;\n  secondaryAction?: ActionButton | ReactNode;\n  actions?: Array<ActionButton | ReactNode>;\n\n  // Additional content\n  illustration?: ReactNode;\n  children?: ReactNode;\n\n  // Styling\n  fullHeight?: boolean;\n  minHeight?: string;\n}\n\n// Preset configurations\nconst presetConfigs = {\n  \"card-apply\": {\n    variant: \"primary\" as const,\n    icon: <CardIcon className=\"h-6 w-6\" variant=\"Bulk\" color=\"currentColor\" />,\n    title: \"Apply for a New Card\",\n    description:\n      \"Get started with a new debit card to manage your finances better\",\n    dashed: true,\n  },\n  transactions: {\n    variant: \"ghost\" as const,\n    icon: <Document className=\"h-6 w-6\" variant=\"Bulk\" color=\"currentColor\" />,\n    title: \"No transactions yet\",\n    description:\n      \"Your transactions will appear here once you start using your card\",\n    bordered: false,\n  },\n  \"card-payment\": {\n    variant: \"error\" as const,\n    icon: <CardIcon className=\"h-6 w-6\" variant=\"Bulk\" color=\"currentColor\" />,\n    title: \"Complete Payment Required\",\n    description: \"Your card order is ready, complete the payment to proceed\",\n  },\n  \"no-results\": {\n    variant: \"default\" as const,\n    icon: (\n      <SearchNormal1 className=\"h-6 w-6\" variant=\"Bulk\" color=\"currentColor\" />\n    ),\n    title: \"No results found\",\n    description:\n      \"Try adjusting your search or filter to find what you're looking for\",\n  },\n  \"no-data\": {\n    variant: \"default\" as const,\n    icon: <Box1 className=\"h-6 w-6\" variant=\"Bulk\" color=\"currentColor\" />,\n    title: \"No data available\",\n    description: \"There's nothing to display at the moment\",\n  },\n};\n\n// Type guard for ActionButton\nconst isActionButton = (action: unknown): action is ActionButton => {\n  return (\n    typeof action === \"object\" &&\n    action !== null &&\n    !React.isValidElement(action) &&\n    \"label\" in (action as ActionButton)\n  );\n};\n\nconst EmptyState: FC<EmptyStateProps> = ({\n  title,\n  description,\n  icon,\n  variant = \"default\",\n  size = \"md\",\n  layout = \"vertical\",\n  bordered = true,\n  dashed = false,\n  primaryAction,\n  secondaryAction,\n  actions,\n  illustration,\n  children,\n  className,\n  fullHeight = false,\n  minHeight,\n  ...props\n}) => {\n  // Render action button\n  const renderActionButton = (\n    action: ActionButton | ReactNode,\n    key: string\n  ) => {\n    if (isActionButton(action)) {\n      const content = (\n        <>\n          {action.icon && action.iconPosition === \"start\" && action.icon}\n          <span>{action.label}</span>\n          {action.icon && action.iconPosition !== \"start\" && action.icon}\n        </>\n      );\n\n      if (action.href) {\n        return (\n          <Button\n            key={key}\n            asChild\n            variant={action.variant || \"primary\"}\n            size={action.size || (size === \"xl\" ? \"lg\" : size)}\n            disabled={action.disabled}\n          >\n            {action.external ? (\n              <a href={action.href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {content}\n              </a>\n            ) : (\n              <Link href={action.href}>{content}</Link>\n            )}\n          </Button>\n        );\n      }\n\n      return (\n        <Button\n          key={key}\n          variant={action.variant || \"primary\"}\n          size={action.size || (size === \"xl\" ? \"lg\" : size)}\n          onClick={action.onClick}\n          disabled={action.disabled}\n        >\n          {content}\n        </Button>\n      );\n    }\n\n    return <React.Fragment key={key}>{action}</React.Fragment>;\n  };\n\n  return (\n    <div\n      className={cn(\n        emptyStateVariants({ variant, size, layout, bordered, dashed }),\n        fullHeight && \"min-h-[400px]\",\n        className\n      )}\n      style={{ minHeight }}\n      {...props}\n    >\n      {/* Icon */}\n      {icon && (\n        <div className={iconContainerVariants({ variant, size })}>{icon}</div>\n      )}\n\n      {/* Illustration */}\n      {illustration && !icon && (\n        <div className=\"flex items-center justify-center\">{illustration}</div>\n      )}\n\n      {/* Text Content */}\n      {(title || description) && (\n        <div className={cn(\"space-y-2\", layout === \"horizontal\" && \"flex-1\")}>\n          {title && (\n            <h3 className={titleVariants({ variant, size })}>{title}</h3>\n          )}\n          {description && (\n            <p className={descriptionVariants({ size })}>{description}</p>\n          )}\n        </div>\n      )}\n\n      {/* Actions */}\n      {(primaryAction || secondaryAction || actions) && (\n        <div\n          className={cn(\n            \"flex flex-wrap gap-3\",\n            layout === \"vertical\" && \"justify-center\",\n            layout === \"horizontal\" && \"md:justify-start\"\n          )}\n        >\n          {primaryAction && renderActionButton(primaryAction, \"primary\")}\n          {secondaryAction && renderActionButton(secondaryAction, \"secondary\")}\n          {actions?.map((action, index) =>\n            renderActionButton(action, `action-${index}`)\n          )}\n        </div>\n      )}\n\n      {/* Custom children */}\n      {children}\n    </div>\n  );\n};\n\n// Preset components\nexport const CardApplyEmpty: FC<Partial<EmptyStateProps>> = (props) => {\n  const config = presetConfigs[\"card-apply\"];\n  return (\n    <EmptyState\n      {...config}\n      primaryAction={{\n        label: \"Apply Now\",\n        href: \"https://paycard.100pay.co/\",\n        external: true,\n        icon: (\n          <ArrowRight className=\"h-4 w-4\" variant=\"Bulk\" color=\"currentColor\" />\n        ),\n        iconPosition: \"end\",\n      }}\n      {...props}\n    />\n  );\n};\n\nexport const TransactionsEmpty: FC<Partial<EmptyStateProps>> = (props) => {\n  const config = presetConfigs[\"transactions\"];\n  return <EmptyState {...config} {...props} />;\n};\n\nexport const CardPaymentEmpty: FC<Partial<EmptyStateProps>> = (props) => {\n  const config = presetConfigs[\"card-payment\"];\n  return <EmptyState {...config} {...props} />;\n};\n\nexport const NoResultsEmpty: FC<Partial<EmptyStateProps>> = (props) => {\n  const config = presetConfigs[\"no-results\"];\n  return (\n    <EmptyState\n      {...config}\n      secondaryAction={{\n        label: \"Clear filters\",\n        variant: \"ghost\",\n      }}\n      {...props}\n    />\n  );\n};\n\nexport const NoDataEmpty: FC<Partial<EmptyStateProps>> = (props) => {\n  const config = presetConfigs[\"no-data\"];\n  return <EmptyState {...config} {...props} />;\n};\n\nEmptyState.displayName = \"EmptyState\";\n\nexport { EmptyState, emptyStateVariants };\nexport default EmptyState;\n",
      "type": "registry:ui",
      "target": "components/ui/aevr/empty-state.tsx"
    }
  ]
}