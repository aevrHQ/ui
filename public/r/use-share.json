{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-share",
  "type": "registry:hook",
  "title": "Use Share",
  "description": "A hook for sharing data.",
  "dependencies": [
    "@untools/logger",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/hooks/use-share.ts",
      "content": "// ./registry/lagos/hooks/use-share.ts\n\nimport { useState } from \"react\";\nimport { logger } from \"@untools/logger\";\nimport { toast } from \"sonner\";\n\ntype CopyOptions = {\n  successMessage?: string;\n  errorMessage?: string;\n  clearAfterMs?: number;\n};\n\ntype ShareContentOptions = {\n  title: string;\n  description: string;\n  fallbackCopy?: boolean;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\ntype ShareFileOptions = {\n  files: File[];\n  title?: string;\n  text?: string;\n  fallbackMessage?: string;\n  successMessage?: string;\n  errorMessage?: string;\n};\n\nconst useShare = () => {\n  const [isCopying, setIsCopying] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n\n  const copy = async (\n    text: string,\n    options?: CopyOptions\n  ): Promise<boolean> => {\n    setIsCopying(true);\n    try {\n      await navigator.clipboard.writeText(text);\n      toast.success(options?.successMessage || `Copied to clipboard`);\n      logger.log(\"Copied to clipboard:\", text);\n\n      if (options?.clearAfterMs) {\n        setTimeout(() => {\n          navigator.clipboard.writeText(\"\");\n          logger.log(\"Clipboard cleared after delay\");\n        }, options.clearAfterMs);\n      }\n\n      return true;\n    } catch (error) {\n      logger.error(\"Clipboard error:\", error);\n      toast.error(options?.errorMessage || \"Failed to copy to clipboard\");\n      return false;\n    } finally {\n      setIsCopying(false);\n    }\n  };\n\n  const shareContent = async (\n    url: string,\n    options: ShareContentOptions\n  ): Promise<boolean> => {\n    setIsSharing(true);\n\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: options.title,\n          text: options.description,\n          url,\n        });\n        toast.success(options.successMessage || \"Shared successfully\");\n        logger.log(\"Successfully shared content:\", { url, ...options });\n        return true;\n      } catch (error) {\n        logger.error(\"Sharing error:\", error);\n        toast.error(options.errorMessage || \"Failed to share content\");\n        if (options.fallbackCopy) {\n          return copy(url, { successMessage: \"Copied link instead\" });\n        }\n        return false;\n      } finally {\n        setIsSharing(false);\n      }\n    } else {\n      toast.error(\"Sharing not supported on this browser\");\n      logger.warn(\"Web Share API not supported for content\");\n      if (options.fallbackCopy) {\n        return copy(url, { successMessage: \"Copied link instead\" });\n      }\n      setIsSharing(false);\n      return false;\n    }\n  };\n\n  const shareFiles = async (options: ShareFileOptions): Promise<boolean> => {\n    setIsSharing(true);\n\n    const {\n      files,\n      title,\n      text,\n      fallbackMessage,\n      successMessage,\n      errorMessage,\n    } = options;\n\n    if (!navigator.canShare || !navigator.canShare({ files })) {\n      toast.error(\"File sharing not supported\");\n      logger.warn(\"File sharing not supported by browser or file type\");\n      if (fallbackMessage) {\n        toast(fallbackMessage);\n      }\n      setIsSharing(false);\n      return false;\n    }\n\n    try {\n      await navigator.share({\n        title,\n        text,\n        files,\n      });\n      toast.success(successMessage || \"Files shared successfully\");\n      logger.log(\"Files shared successfully:\", files);\n      return true;\n    } catch (error) {\n      logger.error(\"File sharing error:\", error);\n      toast.error(errorMessage || \"Failed to share files\");\n      return false;\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  return {\n    copy,\n    shareContent,\n    shareFiles,\n    isCopying,\n    isSharing,\n  };\n};\n\nexport default useShare;\n",
      "type": "registry:hook",
      "target": "hooks/aevr/use-share.ts"
    }
  ]
}