{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "number-formatter",
  "type": "registry:lib",
  "title": "Number Formatter",
  "description": "A utility function for formatting numbers and currencies.",
  "dependencies": [
    "iso-country-currency",
    "@untools/logger"
  ],
  "files": [
    {
      "path": "registry/lagos/utils/number-formatter.ts",
      "content": "// ./registry/utils/number-formatter.ts\n\nimport { logger } from \"@untools/logger\";\nimport { getParamByParam } from \"iso-country-currency\";\n\ninterface FormatCurrencyOptions {\n  currency?: string;\n  locale?: string;\n  minimumFractionDigits?: number;\n  maximumFractionDigits?: number;\n  display?: \"code\" | \"symbol\" | \"both\";\n  symbolFirst?: boolean;\n}\n\nexport function formatCurrency(\n  value: number,\n  options: FormatCurrencyOptions = {}\n): string {\n  const {\n    currency = \"USD\",\n    locale = \"en-US\",\n    minimumFractionDigits = 2,\n    maximumFractionDigits = 5,\n    display = \"symbol\",\n    symbolFirst = true,\n  } = options;\n\n  try {\n    // Format the number first\n    const formattedNumber = new Intl.NumberFormat(locale, {\n      style: \"decimal\",\n      minimumFractionDigits,\n      maximumFractionDigits,\n    }).format(value);\n\n    // Get symbol if needed\n    let symbol = \"\";\n    if (display === \"symbol\" || display === \"both\") {\n      try {\n        const foundSymbol = getParamByParam(\"currency\", currency, \"symbol\");\n        if (foundSymbol) {\n          symbol = foundSymbol;\n        }\n      } catch {\n        // If symbol lookup fails, fall back to code-only display\n        return `${currency} ${formattedNumber}`;\n      }\n    }\n\n    // Return formatted string based on display option\n    switch (display) {\n      case \"symbol\":\n        return symbol\n          ? `${symbol}${formattedNumber}`\n          : `${currency} ${formattedNumber}`;\n      case \"both\":\n        if (symbol) {\n          return symbolFirst\n            ? `${symbol} ${formattedNumber} (${currency})`\n            : `${currency} ${formattedNumber} (${symbol})`;\n        }\n        return `${currency} ${formattedNumber}`;\n      case \"code\":\n      default:\n        return `${currency} ${formattedNumber}`;\n    }\n  } catch (error) {\n    logger.error(\"ðŸš« Something went wrong while formatting currency:\", error);\n    // Ultimate fallback\n    return `${currency} ${value.toFixed(minimumFractionDigits)}`;\n  }\n}\n\nexport function formatNumber(\n  value: number,\n  options: FormatCurrencyOptions = {}\n): string {\n  const {\n    locale = \"en-US\",\n    minimumFractionDigits = 2,\n    maximumFractionDigits = 5,\n  } = options;\n\n  try {\n    // Format the number first\n    const formattedNumber = new Intl.NumberFormat(locale, {\n      style: \"decimal\",\n      minimumFractionDigits,\n      maximumFractionDigits,\n    }).format(value);\n\n    return formattedNumber;\n  } catch (error) {\n    logger.error(\"ðŸš« Something went wrong while formatting number:\", error);\n    // Ultimate fallback\n    return value.toFixed(minimumFractionDigits);\n  }\n}\n\nexport interface FormatOptions {\n  mask?: boolean;\n  maskChar?: string;\n  maskCount?: number;\n  spacing?: number;\n  separator?: string;\n  customPattern?: string | null;\n}\n\nexport function formatCardNumber(\n  input: string | number,\n  options: FormatOptions = {}\n): string {\n  const {\n    mask = false,\n    maskChar = \"*\",\n    maskCount = 12,\n    spacing = 4,\n    separator = \" \",\n    customPattern = null,\n  } = options;\n\n  // Convert input to string and remove any existing separators\n  const cleanInput = String(input).replace(/\\D/g, \"\");\n\n  // Handle masking (for card numbers)\n  if (mask) {\n    let masked: string;\n\n    if (cleanInput.length <= 4) {\n      // For short inputs (like \"3456\"), create full card format with masking\n      masked = maskChar.repeat(maskCount) + cleanInput.padStart(4, \"0\");\n    } else {\n      // For longer inputs, take last 4 digits and mask the rest\n      const lastFour = cleanInput.slice(-4);\n      masked = maskChar.repeat(maskCount) + lastFour;\n    }\n\n    // Apply formatting to masked string\n    return applyFormatting(masked, spacing, separator, customPattern);\n  }\n\n  // Apply formatting to original input\n  return applyFormatting(cleanInput, spacing, separator, customPattern);\n}\n\nfunction applyFormatting(\n  str: string,\n  spacing: number,\n  separator: string,\n  customPattern: string | null\n): string {\n  if (customPattern) {\n    // Custom pattern formatting (e.g., \"XXXX-XXXX-XXXX-XXXX\")\n    let result = \"\";\n    let strIndex = 0;\n\n    for (let i = 0; i < customPattern.length && strIndex < str.length; i++) {\n      if (customPattern[i] === \"X\") {\n        result += str[strIndex++];\n      } else {\n        result += customPattern[i];\n      }\n    }\n\n    // Add remaining digits if any\n    if (strIndex < str.length) {\n      result += str.slice(strIndex);\n    }\n\n    return result;\n  }\n\n  // Default spacing formatting\n  return str\n    .replace(new RegExp(`(.{${spacing}})`, \"g\"), `$1${separator}`)\n    .trim();\n}\n\n// // Usage examples:\n\n// // Basic masking (12 asterisks + last 4 digits)\n// console.log(formatCardNumber(\"1234567890123456\", { mask: true }));\n// // Output: \"**** **** **** 3456\"\n\n// // Custom mask character and count\n// console.log(\n//   formatCardNumber(\"1234567890123456\", {\n//     mask: true,\n//     maskChar: \"#\",\n//     maskCount: 8,\n//   }),\n// );\n// // Output: \"#### #### 3456\"\n\n// // Format without masking (default: space every 4 digits)\n// console.log(formatCardNumber(\"1234567890123456\"));\n// // Output: \"1234 5678 9012 3456\"\n\n// // Custom spacing\n// console.log(formatCardNumber(\"123456789\", { spacing: 3, separator: \"-\" }));\n// // Output: \"123-456-789\"\n\n// // Custom pattern\n// console.log(\n//   formatCardNumber(\"1234567890123456\", {\n//     customPattern: \"XXXX-XXXX-XXXX-XXXX\",\n//   }),\n// );\n// // Output: \"1234-5678-9012-3456\"\n\n// // Masked with custom pattern\n// console.log(\n//   formatCardNumber(\"1234567890123456\", {\n//     mask: true,\n//     customPattern: \"XXXX-XXXX-XXXX-XXXX\",\n//   }),\n// );\n// // Output: \"****-****-****-3456\"\n",
      "type": "registry:lib",
      "target": "utils/aevr/number-formatter.ts"
    }
  ]
}